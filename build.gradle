plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "edu.wpi.first.GradleRIO" version "2024.3.2"
}

version = '2024.2.8'
group = 'org.a05annex'

// Set to true to use debug for JNI.
wpi.java.debugJni = false

test {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.a05annex:a05annexUtil:0.9.6'
    //implementation fileTree(dir: 'libs', include: ['*.jar'])
    api 'org.jetbrains:annotations:23.0.0'
    api 'com.googlecode.json-simple:json-simple:1.1.1'

    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation('junit:junit:4.13.2')
    testImplementation('net.sourceforge.argparse4j:argparse4j:0.8.1')
    testImplementation('org.junit.platform:junit-platform-runner:1.9.0')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.9.0')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.9.0')
    testImplementation('org.mockito:mockito-core:4.8.0')
    testRuntimeOnly('org.a05annex:a05annexUtil:0.9.6')
}


java {
    def javaVersion = JavaVersion.VERSION_17
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    withJavadocJar()
    withSourcesJar()
}

test {
    testLogging {
        events 'started', 'passed'
    }
}

signing {
    if (project.hasProperty("signing.keyId") &&
            project.hasProperty("signing.password") &&
            project.hasProperty("signing.secretKeyRingFile") )
    {
        sign publishing.publications
    }
}

publishing {
    repositories {
        maven {
            name = "Sonatype"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'a05annexRobot'
            from components.java
            pom {
                name = 'A05annex Robot Library'
                description = 'A05annex robot base for swerve and NavX.'
                url = 'https://github.com/A05annex/a05annexRobot'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'A05annex'
                        name = 'A05annex'
                        email = 'a05annexrobotics@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/A05annex/a05annexRobot.git'
                    developerConnection = 'scm:git:ssh://github.com/A05annex/a05annexRobot.git'
                    url = 'https://github.com/A05annex/a05annexRobot'
                }
            }
        }
    }
}


wpi.java.configureTestTasks(test)




